/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DemoRouteImport } from './routes/demo'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ApiWorkspacesRouteImport } from './routes/api.workspaces'
import { Route as ApiContactsRouteImport } from './routes/api.contacts'
import { Route as ApiContactRolesRouteImport } from './routes/api.contact-roles'
import { Route as ApiContactRoleAssignmentsRouteImport } from './routes/api.contact-role-assignments'
import { Route as ApiContactActivitiesRouteImport } from './routes/api.contact-activities'
import { Route as ApiChromeRouteImport } from './routes/api.chrome'
import { Route as WorkspaceContactsRouteImport } from './routes/$workspace.contacts'
import { Route as WorkspaceContactsIndexRouteImport } from './routes/$workspace.contacts.index'
import { Route as WorkspaceContactsContactRouteImport } from './routes/$workspace.contacts.$contact'

const DemoRoute = DemoRouteImport.update({
  id: '/demo',
  path: '/demo',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiWorkspacesRoute = ApiWorkspacesRouteImport.update({
  id: '/api/workspaces',
  path: '/api/workspaces',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiContactsRoute = ApiContactsRouteImport.update({
  id: '/api/contacts',
  path: '/api/contacts',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiContactRolesRoute = ApiContactRolesRouteImport.update({
  id: '/api/contact-roles',
  path: '/api/contact-roles',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiContactRoleAssignmentsRoute =
  ApiContactRoleAssignmentsRouteImport.update({
    id: '/api/contact-role-assignments',
    path: '/api/contact-role-assignments',
    getParentRoute: () => rootRouteImport,
  } as any)
const ApiContactActivitiesRoute = ApiContactActivitiesRouteImport.update({
  id: '/api/contact-activities',
  path: '/api/contact-activities',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiChromeRoute = ApiChromeRouteImport.update({
  id: '/api/chrome',
  path: '/api/chrome',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspaceContactsRoute = WorkspaceContactsRouteImport.update({
  id: '/$workspace/contacts',
  path: '/$workspace/contacts',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspaceContactsIndexRoute = WorkspaceContactsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WorkspaceContactsRoute,
} as any)
const WorkspaceContactsContactRoute =
  WorkspaceContactsContactRouteImport.update({
    id: '/$contact',
    path: '/$contact',
    getParentRoute: () => WorkspaceContactsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/demo': typeof DemoRoute
  '/$workspace/contacts': typeof WorkspaceContactsRouteWithChildren
  '/api/chrome': typeof ApiChromeRoute
  '/api/contact-activities': typeof ApiContactActivitiesRoute
  '/api/contact-role-assignments': typeof ApiContactRoleAssignmentsRoute
  '/api/contact-roles': typeof ApiContactRolesRoute
  '/api/contacts': typeof ApiContactsRoute
  '/api/workspaces': typeof ApiWorkspacesRoute
  '/$workspace/contacts/$contact': typeof WorkspaceContactsContactRoute
  '/$workspace/contacts/': typeof WorkspaceContactsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/demo': typeof DemoRoute
  '/api/chrome': typeof ApiChromeRoute
  '/api/contact-activities': typeof ApiContactActivitiesRoute
  '/api/contact-role-assignments': typeof ApiContactRoleAssignmentsRoute
  '/api/contact-roles': typeof ApiContactRolesRoute
  '/api/contacts': typeof ApiContactsRoute
  '/api/workspaces': typeof ApiWorkspacesRoute
  '/$workspace/contacts/$contact': typeof WorkspaceContactsContactRoute
  '/$workspace/contacts': typeof WorkspaceContactsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/demo': typeof DemoRoute
  '/$workspace/contacts': typeof WorkspaceContactsRouteWithChildren
  '/api/chrome': typeof ApiChromeRoute
  '/api/contact-activities': typeof ApiContactActivitiesRoute
  '/api/contact-role-assignments': typeof ApiContactRoleAssignmentsRoute
  '/api/contact-roles': typeof ApiContactRolesRoute
  '/api/contacts': typeof ApiContactsRoute
  '/api/workspaces': typeof ApiWorkspacesRoute
  '/$workspace/contacts/$contact': typeof WorkspaceContactsContactRoute
  '/$workspace/contacts/': typeof WorkspaceContactsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/demo'
    | '/$workspace/contacts'
    | '/api/chrome'
    | '/api/contact-activities'
    | '/api/contact-role-assignments'
    | '/api/contact-roles'
    | '/api/contacts'
    | '/api/workspaces'
    | '/$workspace/contacts/$contact'
    | '/$workspace/contacts/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/demo'
    | '/api/chrome'
    | '/api/contact-activities'
    | '/api/contact-role-assignments'
    | '/api/contact-roles'
    | '/api/contacts'
    | '/api/workspaces'
    | '/$workspace/contacts/$contact'
    | '/$workspace/contacts'
  id:
    | '__root__'
    | '/'
    | '/demo'
    | '/$workspace/contacts'
    | '/api/chrome'
    | '/api/contact-activities'
    | '/api/contact-role-assignments'
    | '/api/contact-roles'
    | '/api/contacts'
    | '/api/workspaces'
    | '/$workspace/contacts/$contact'
    | '/$workspace/contacts/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DemoRoute: typeof DemoRoute
  WorkspaceContactsRoute: typeof WorkspaceContactsRouteWithChildren
  ApiChromeRoute: typeof ApiChromeRoute
  ApiContactActivitiesRoute: typeof ApiContactActivitiesRoute
  ApiContactRoleAssignmentsRoute: typeof ApiContactRoleAssignmentsRoute
  ApiContactRolesRoute: typeof ApiContactRolesRoute
  ApiContactsRoute: typeof ApiContactsRoute
  ApiWorkspacesRoute: typeof ApiWorkspacesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/demo': {
      id: '/demo'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof DemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/workspaces': {
      id: '/api/workspaces'
      path: '/api/workspaces'
      fullPath: '/api/workspaces'
      preLoaderRoute: typeof ApiWorkspacesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/contacts': {
      id: '/api/contacts'
      path: '/api/contacts'
      fullPath: '/api/contacts'
      preLoaderRoute: typeof ApiContactsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/contact-roles': {
      id: '/api/contact-roles'
      path: '/api/contact-roles'
      fullPath: '/api/contact-roles'
      preLoaderRoute: typeof ApiContactRolesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/contact-role-assignments': {
      id: '/api/contact-role-assignments'
      path: '/api/contact-role-assignments'
      fullPath: '/api/contact-role-assignments'
      preLoaderRoute: typeof ApiContactRoleAssignmentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/contact-activities': {
      id: '/api/contact-activities'
      path: '/api/contact-activities'
      fullPath: '/api/contact-activities'
      preLoaderRoute: typeof ApiContactActivitiesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/chrome': {
      id: '/api/chrome'
      path: '/api/chrome'
      fullPath: '/api/chrome'
      preLoaderRoute: typeof ApiChromeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$workspace/contacts': {
      id: '/$workspace/contacts'
      path: '/$workspace/contacts'
      fullPath: '/$workspace/contacts'
      preLoaderRoute: typeof WorkspaceContactsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$workspace/contacts/': {
      id: '/$workspace/contacts/'
      path: '/'
      fullPath: '/$workspace/contacts/'
      preLoaderRoute: typeof WorkspaceContactsIndexRouteImport
      parentRoute: typeof WorkspaceContactsRoute
    }
    '/$workspace/contacts/$contact': {
      id: '/$workspace/contacts/$contact'
      path: '/$contact'
      fullPath: '/$workspace/contacts/$contact'
      preLoaderRoute: typeof WorkspaceContactsContactRouteImport
      parentRoute: typeof WorkspaceContactsRoute
    }
  }
}

interface WorkspaceContactsRouteChildren {
  WorkspaceContactsContactRoute: typeof WorkspaceContactsContactRoute
  WorkspaceContactsIndexRoute: typeof WorkspaceContactsIndexRoute
}

const WorkspaceContactsRouteChildren: WorkspaceContactsRouteChildren = {
  WorkspaceContactsContactRoute: WorkspaceContactsContactRoute,
  WorkspaceContactsIndexRoute: WorkspaceContactsIndexRoute,
}

const WorkspaceContactsRouteWithChildren =
  WorkspaceContactsRoute._addFileChildren(WorkspaceContactsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DemoRoute: DemoRoute,
  WorkspaceContactsRoute: WorkspaceContactsRouteWithChildren,
  ApiChromeRoute: ApiChromeRoute,
  ApiContactActivitiesRoute: ApiContactActivitiesRoute,
  ApiContactRoleAssignmentsRoute: ApiContactRoleAssignmentsRoute,
  ApiContactRolesRoute: ApiContactRolesRoute,
  ApiContactsRoute: ApiContactsRoute,
  ApiWorkspacesRoute: ApiWorkspacesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.ts'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
