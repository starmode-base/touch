---
alwaysApply: true
---

SUPER IMPORTANT: ALWAYS FOLLOW THESE RULES CAREFULLY UNLESS THE USER EXPLICITLY SAYS NOT TO. IF YOU ARE UNSURE, THESE RULES WIN.

# Constraints

- NEVER modify files or run tools unless explicitly instructed by the user. When in doubt, ask; default to no edits.
- MUST guard only for known, documented error cases. NO defensive code otherwise.
- MUST implement only explicitly requested requirements. NO speculative features or abstractions.
- MUST avoid premature optimizations. Optimize only when a measurable bottleneck is identified.
- MUST fail fast on missing/invalid required data. NEVER invent defaults, speculative fallbacks, or silent recovery.
- MUST make API parameters required. Gate calls at the call site; only call when the value exists.
- MUST handle optional values explicitly. NO `?? ""` or similar meaningless fallbacks.

# Code style

- WRITE functional style code (immutable, pure functions).
- Use imperative style (for-loops, local mutation, classes) ONLY when necessary.
- For all imperative code, write comments explaining why it is chosen over functional style.
- NEVER export symbols that aren't imported anywhere.

# Testability

- Write code that can be tested without mocks.
- Create factories for boundary functions to support testing without mocks.

# Testing

CRITICALLY IMPORTANT: Write tests based on expected behavior/requirements, NOT the current implementation. A failing test reveals a bug in the code, not the test.

- Run tests with `vitest run`.
- Use the Arrange → Act → Assert (AAA) pattern (don't spell it out in code).
- Use one top-level `describe` per function or unit under test.
- Use `test()` instead of `it()`.
- Test names should follow subject-based pattern: start with who/what, then state the expected behavior (e.g., "unauthenticated user is rejected", "administrator can update organization").
- Order tests within each describe block from negative (expected failures) to positive (happy path).
- It's okay to disable lint rules in test files if needed.
- Use `describe.each` or `test.each` when validating the same logic across multiple inputs.
- Prefer `{ label, input, expected }` objects for parameterized test cases.
- Use names (characters, planets, space stations, spaceships) from the Aliens (1986) movie.

# Documentation

- Always use sentence case for titles (never title case).
- In code comments with _one_ sentence, omit the period.

# Drizzle ORM / Postgres

When working with Drizzle ORM and database schemas:

- NEVER create migrations.
- NEVER modify `src/postgres/relations.ts`.
